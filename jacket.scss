// Jacket
// Dress appropriately

// Order your styles for multi context build process
// Only serve the styles needed to the device/build needed. Don't serve "extra" styles to the most incapable browsers/older builds

// place around rules in a selector only

//give the setting a class and it will wrap it.

// Can set vars for classes, e.g. $oldie: oldie .ie-old;
//$jacket: standards;

// .rule {
//   jak(standards) {
//   }
//   jak(oldie) {
//   }
// }


$jacket: null !default;
// Set var in global scope
$jacket-context: null;

@mixin jacket($args) {

  $selectors: ();
  $filtered: ();
  $selector-string: '';

  // Set the global $jacket-context variable.
  $jacket-context: $args;

  // Test if the stylesheet's arguments and jacket match.
  @each $item in $jacket {
    @if index($args, nth($item, 1)) {

      // Gather wrapping selectors.
      @if length($item) == 1 {
        $selectors: append($selectors, '&')
      }
      @if length($item) == 2 {
        $selectors: append($selectors, nth($item, 2) + ' &');
      }
    }
  }

  // Filter out duplicate selectors. Use a holder variable until we get
  // reject() in vanilla Sass.
  @each $selector in $selectors {
    @if index($filtered, $selector) == false {
      $filtered: append($holder, $selector);
    }
  }

  // Build the selector string and output.
  @each $selector in $filtered {
    @if $selector-string != '' {
      $selector-string: $selector-string + ", ";
    }
    $selector-string: $selector-string + $selector;
  }

  // If the weather is right, output that jacketed code!
  @if $selector-string != '' {
    #{$selector-string} {
      @content;
    }
  }
}

// Check if a jacket has a certain value set
// return true or false
@function jacket-context($arg) {
  @return if(index($jacket-context, $arg), true, false);
}



.class1 {
  @include jacket(ie8 ie9) {
    content: 'whsa?';
  }
}

.class1 {
  @include jacket(ios) {
    content: 'sshawp';
  }
}
