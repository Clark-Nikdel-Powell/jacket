///////////////////////////////////////////////////////////
// Jacket
// Dress appropriately
///////////////////////////////////////////////////////////

// Jacket helps you orgainze stylesheets for a multi-context build process.
// Write and maintain a master stylesheet, then output custom tailored
// stylesheets for specific browsers, mobile/desktop sites, and app builds.

// A list of jackets to print in the stylesheet.
$jacket: null !default;

// A private variable used by jacket-context().
$jacket-context: null;

///////////////////////////////////////////////////////////
// Jacket mixin
// Takes a list of jacket values.
///////////////////////////////////////////////////////////
@mixin jacket($args...) {

  $naked: false;
  $selectors: ();
  $filtered: ();
  $selector-string: '';

  // Set the global $jacket-context variable.
  $jacket-context: $args;

  // If jacket is a single jacket value and selector list, encapsulate so it's
  // sent through the next function in one piece.
  @if list-separator($jacket) == 'space' {
    $jacket: $jacket, null;
  }

  // Test if the stylesheet's $jacket variable and jacket mixin arguments match.
  @each $item in $jacket {
    @if index($args, nth($item, 1)) {

      // Gather wrapping selectors.
      @if length($item) == 1 {
        $naked: true;
      }
      @if length($item) == 2 {
        $selectors: append($selectors, nth($item, 2) + ' &');
      }
    }
  }

  // Filter out duplicate selectors. We can simplify if reject() is added to
  // Sass.
  @each $selector in $selectors {
    @if index($filtered, $selector) == false {
      $filtered: append($filtered, $selector);
    }
  }

  // Build the selector string and output.
  @each $selector in $filtered {
    @if $selector-string != '' {
      $selector-string: $selector-string + ", ";
    }
    $selector-string: $selector-string + $selector;
  }

  // If the weather is right, output that jacketed code!
  @if $naked {
    @content;
  }
  @if $selector-string != '' {
    #{$selector-string} {
      @content;
    }
  }
}

///////////////////////////////////////////////////////////
// Jacket Context function
// Takes a jacket value. Use when code inside a jacket
// needs to know if a specific jacket value is set.
///////////////////////////////////////////////////////////
@function jacket-context($arg) {
  @return if(index($jacket-context, $arg), true, false);
}
